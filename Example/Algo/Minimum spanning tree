#include <bits/stdc++.h>
using namespace std;

vector<pair<int, pair<int, int>>> adjacency_tree;
vector<int> node_point(1001);
vector<int> tree_height(1001);
int length_of_MSP;

int root(int a)
{
    while (node_point[a] != a)
    {
        a = node_point[a];
    }
    return a;
}

int connect_nodes(int a, int b)
{
    int root_of_a = root(a);
    int root_of_b = root(b);
    if (root_of_a == root_of_b)
    {
        return 0;
    }
    else
    {
        if (tree_height[root_of_a] > tree_height[root_of_b])
        {
            tree_height[root_of_a] = max(tree_height[root_of_b] + 1, tree_height[root_of_a]);
            node_point[root_of_a] = root_of_b;
        }
        else
        {
            tree_height[root_of_b] = max(tree_height[root_of_a] + 1, tree_height[root_of_b]);
            node_point[root_of_b] = root_of_a;
        }
        return 1;
    }
}

int main()
{
    int number_of_nodes = 10;
    int number_of_edges = 11;

    for (size_t i = 1; i <= number_of_nodes; i++)
    {
        node_point[i] = i;
        tree_height[i] = 1;
    }
    length_of_MSP = 0;
    // adding edges
    // adjacency_tree.push_back({c,{y,x}});   x connected with y with edge length c

    adjacency_tree.push_back({3, {1, 10}});
    adjacency_tree.push_back({4, {1, 2}});
    adjacency_tree.push_back({5, {2, 3}});
    adjacency_tree.push_back({1, {3, 5}});
    adjacency_tree.push_back({3, {5, 7}});
    adjacency_tree.push_back({7, {4, 6}});
    adjacency_tree.push_back({2, {3, 4}});
    adjacency_tree.push_back({8, {2, 8}});
    adjacency_tree.push_back({10, {8, 9}});
    adjacency_tree.push_back({8, {8, 4}});
    adjacency_tree.push_back({5, {5, 4}});
    // Sorting in increasing order of edgelength

    sort(adjacency_tree.begin(), adjacency_tree.end());

    cout << "Edges of MSP\n";

    for (size_t i = 0; i < number_of_edges; i++)
    {
        int node1, node2, length;
        node1 = adjacency_tree[i].second.first;
        node2 = adjacency_tree[i].second.second;
        length = adjacency_tree[i].first;
        int to_connect = connect_nodes(node1, node2);
        if (to_connect == 1)
        {
            length_of_MSP += length;
            // node1 node2 and length of edge
            cout << node1 << " " << node2 << " " << length << endl;
        }
    }
    cout << "Length of MSP   " << length_of_MSP << endl;
    return 0;
}
